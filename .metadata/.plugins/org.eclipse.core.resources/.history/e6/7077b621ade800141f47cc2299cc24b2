import java.util.ArrayList;
import java.util.HashMap; 
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class Sentence {
	
	private String word;
	private String lemma;
	private String ner;
	private String pos;
	
	public ArrayList<String> actors;
	public ArrayList<String> dates;
	public ArrayList<String> verbs;
	public HashMap<String, ArrayList<String>> dependencypairs; 
	public String text = ""; 
	
	// EVENT EXTRACTING
	private String action;
	private String actor;
	
	public Sentence(NodeList nList) 
	{	
		// initialize actors, dates, verbs, dependency pairs
		actors = new ArrayList<String>();
		dates = new ArrayList<String>();
		verbs = new ArrayList<String>();
		dependencypairs = new HashMap<String, ArrayList<String>>(); 
		init(nList); 
	}
	
	public void init(NodeList nList)
	{	
    	// runs through each <sentence> node
    	for (int temp = 0; temp < nList.getLength(); temp++) 
    	{
    		Node nNode = nList.item(temp);	// gets the current <sentence>     
     
    		// get the first thing in <sentence> which is <tokens>
    		if (nNode.getNodeType() == Node.ELEMENT_NODE) 
    		{ 
    			Element eElement = (Element) nNode;
    			
    			// get a list of <token> under <tokens>
    			NodeList tList = eElement.getElementsByTagName("token");
    			// run through all the <token>'s
    			for (int t = 0; t < tList.getLength(); t++) {
    				Node tNode = tList.item(t);	// the current token
    				
    				if (tNode.getNodeType() == Node.ELEMENT_NODE)
    				{
    					Element tElement = (Element) tNode;
    					ner = tElement.getElementsByTagName("NER").item(0).getTextContent();
    					lemma = tElement.getElementsByTagName("lemma").item(0).getTextContent();
    					word = tElement.getElementsByTagName("word").item(0).getTextContent();
    					pos = tElement.getElementsByTagName("POS").item(0).getTextContent();
    					if(!word.equals("."))
    						text = text.concat(" ");
    					text = text.concat(word); 
    					extractNamedEntities();
    					extractVerbs();
    				}
    			} 
    			
    			// get a list of <token> under <tokens>
    			NodeList dList = eElement.getElementsByTagName("dep");
    			// run through all the <dep>'s
    			for (int d = 0; d < dList.getLength(); d++) 
    			{
    				Node dNode = dList.item(d);	// the current token
    				
    				if (dNode.getNodeType() == Node.ELEMENT_NODE) 
    				{
    					Element dElement = (Element) dNode; 	
    					String depentype = dElement.getAttribute("type");
    					String dependent = dElement.getElementsByTagName("dependent").item(0).getTextContent();
    					String governor = dElement.getElementsByTagName("governor").item(0).getTextContent();
    					
    					checkDependencies(depentype, dependent, governor); 
    				}
    			} 
    		}    			
    	}
    }
	
	/**
	 * Checks named entities for location and actors
	 */
	private void extractNamedEntities() 
	{	
		if (ner.equals("O") == false) 
		{	
			// if NER is an actor
			if (ner.equals("PERSON") || ner.equals("LOCATION") || ner.equals("ORGANIZATION") || ner.equals("MISC")) 
				if ( lemma.charAt(0) != lemma.toLowerCase().charAt(0) ) 		
					actors.add(word);

			// if NER is a date
			else if (ner.equals("DATE") || ner.equals("TIME") || ner.equals("DURATION") || ner.equals("SET")) 
				dates.add(word.toLowerCase());	
		}
	}
	
	/**
	 * Checks part of speech for verbs
	 */
	private void extractVerbs() 
	{
		if (pos.length() > 2) 
			if (pos.substring(0, 2).equals("VB")) 
				verbs.add(word.toLowerCase());
	}
	
	/**
	 * Extracts all dependencies
	 */
	private void checkDependencies(String depentype, String dependent, String governor) 
	{
		// find the main action of the sentence
		if (depentype.equals("root")) {
			action = dependent;
		}
		// 
		else if (depentype.equals("nsubj")) {
			// if the governor string is the action of the verb
			if (governor.equals(action) ) {
				// check if the dependent is in the list of actors
				if(actors.contains(dependent)) {
					// if we get here, then the dependent is the main actor of the word
				}
			}
		}
		
		
		if(actors.contains(dependent)) {
			if(dependencypairs.containsKey(dependent)) {
				if(!dependencypairs.get(dependent).contains(governor)) {
					dependencypairs.get(dependent).add(governor);
				}
			} else {
				ArrayList<String> listgov = new ArrayList<String>(); 
				listgov.add(governor);
				dependencypairs.put(dependent, listgov);
			}
		}
	}
	
	
}
