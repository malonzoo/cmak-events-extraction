import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.HashMap;
 

public class EventExtractor {
	
	HashSet<String> actors = new HashSet<String>();
	HashMap<String, ArrayList<String>> allIds = new HashMap<String, ArrayList<String>>(); 
	ArrayList<String> sentences = new ArrayList<String>();
	
	ArrayList al = new ArrayList();
	public EventExtractor() {
	}
	
	private void checkNER(String ner, String word) {
		if (ner.equals("O") == false) {		
			// if NER is an actor
			if (ner.equals("PERSON") || ner.equals("LOCATION") || ner.equals("ORGANIZATION") || ner.equals("MISC")) {
				if ( word.charAt(0) != word.toLowerCase().charAt(0) ) {
					System.out.println(word + " is an actor");
					
				}
			}
			
		}
	}

	public static void main(String[] args) {
		EventExtractor eventExtractor = new EventExtractor();
		try {
			File fXmlFile = new File("PetrarchGigaWord.xml");
	    	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	    	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	    	Document doc = dBuilder.parse(fXmlFile);
	     
	    	//optional, but recommended
	    	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	    	doc.getDocumentElement().normalize();
	     
	    	System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
	     
	    	NodeList nList = doc.getElementsByTagName("sentence");
	     
	    	System.out.println("----------------------------");
	     
	    	// runs through each <sentence> node
	    	for (int temp = 0; temp < nList.getLength(); temp++) {
	    		Node nNode = nList.item(temp);	// gets the current <sentence>     
	    		System.out.println("\nCurrent Element :" + nNode.getNodeName() + ": " + ((Element)nNode).getAttribute("id"));
	     
	    		// get the first thing in <sentence> which is <tokens>
	    		if (nNode.getNodeType() == Node.ELEMENT_NODE) { 
	    			Element eElement = (Element) nNode;
	    			
	    			// get a list of <token> under <tokens>
	    			NodeList tList = eElement.getElementsByTagName("token");
	    			// run through all the <token>'s
	    			for (int t = 0; t < tList.getLength(); t++) {
	    				Node tNode = tList.item(t);	// the current token
	    				
	    				if (tNode.getNodeType() == Node.ELEMENT_NODE) {
	    					Element tElement = (Element) tNode;
	    					String tNodeNER = tElement.getElementsByTagName("NER").item(0).getTextContent();
	    					String word = tElement.getElementsByTagName("lemma").item(0).getTextContent();
	    					eventExtractor.checkNER(tNodeNER, word);
	    				}
	    			}    			
	    		}
	
	    	}
	    	} catch (Exception e) {
	    	e.printStackTrace();
	        }
		
	}
}
