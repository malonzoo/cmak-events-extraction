import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;


public class TrainingSet {

	public static ArrayList<String> actors; 
	public static HashMap<String, ArrayList<String>> issues;
	
	/**
	 * Constructor
	 * @throws FileNotFoundException
	 */
	public TrainingSet() throws FileNotFoundException 
	{
		actors = new ArrayList<String>();
		issues = new HashMap<String, ArrayList<String>>();
		loadActors(); 
		loadIssues(); 	
	}
	
	/**
	 * Load Actors from actors.txt Phoenix testing set
	 * @throws FileNotFoundException
	 */
	public void loadActors() throws FileNotFoundException {
		
		Scanner s1 = new Scanner(new File("actors.txt"));
		
		s1.useDelimiter("\n");
		while (s1.hasNext())
		{
			String line = s1.next();
			line = line.trim();
			String zero = null; 
			try {
				 zero = ((Character)line.charAt(0)).toString();
			} catch (StringIndexOutOfBoundsException s) {};
			
			if(line != null && zero != null && !zero.equals('[') ) {
				if(line.indexOf(";") != -1)
					line = line.substring(0, line.indexOf(";")); 
				
				if(line.indexOf("#") != -1)
					line = line.substring(0, line.indexOf("#")); 
				
				if(line.indexOf('[') != -1)
				{
					line = line.substring(0, line.indexOf("["));
					line.trim();
				}
			}
			
			line.trim();
					
			if(!actors.contains(line)) {
				actors.add(line.toLowerCase().trim());
			}
				
			// for multiple worded actors, add all subcomponents 
			String[] subcomponents = line.split("\\s+");
			for(String s: subcomponents)
			{
				s.trim(); 
				s.replaceAll("\\s+", "");
				
				if(s.length() > 3) { // avoid determiners like a, an, the 
					if(!actors.contains(s)) {
						actors.add(s.toLowerCase().trim());
					}
				}				
			}				
		}	
		s1.close();
	}
	
	/**
	 * Load Issues from issues.txt
	 * @throws FileNotFoundException
	 */
	public void loadIssues() throws FileNotFoundException {
		Scanner s2 = new Scanner(new File("issues.txt"));
		s2.useDelimiter("\n");
		while (s2.hasNext()){
			String line = s2.next();
			// don't add terms beginning with an ~ since those are less imp in the orig file
			if(line.indexOf('~') == -1)
				addIssue(line.toLowerCase());
		} s2.close();
	}

	/**
	 * 
	 * @param line
	 */
	private void addIssue(String line) {
		
		int i = line.indexOf('[');
		String sub = ""; 
		String subkey = "";
		String topic = ""; 
		System.out.println(line);
		
		// figure out where subissue is and where topic is in the formal subissue [topic]
		if(i != -1) {
			sub = line.substring(0, i); 
			subkey = sub.trim().replaceAll("\\s+",""); 
			int j = line.indexOf(']');
			if (j == -1)
				j = line.length()-1
			topic = line.substring(i+1, j); 
			topic = topic.trim(); 
		} else {
			subkey = line.trim().replaceAll("\\s+",""); 
			topic = " "; 
		}
		
		// input issue as is
		if(issues.containsKey(subkey) && !issues.get(subkey).contains(topic))
			issues.get(subkey).add(topic); 
		else {
			ArrayList<String> topics = new ArrayList<String>(); 
			topics.add(topic); 
			issues.put(subkey, topics); 
		}
			
		// input issue subcomponents if more than one word
		String[] subcomponents = sub.split("\\s+");
		for(String s: subcomponents) {
			s.trim(); 
			s.replaceAll("\\s+", "");
				
			if(s.length() > 3) {
				if(issues.containsKey(s) && !issues.get(s).contains(topic))
					issues.get(s).add(topic); 
				else {
					ArrayList<String> topics = new ArrayList<String>(); 
					topics.add(topic); 
					issues.put(s, topics); 
				}
			}
				
		}			
	}
	
	/**
	 * Main 
	 * @param args
	 * @throws FileNotFoundException
	 */
	public static void main(String[] args) throws FileNotFoundException {	
		TrainingSet t = new TrainingSet(); 
		System.out.println(issues.containsKey("elections"));
	}
	
	
	
	
	
}
